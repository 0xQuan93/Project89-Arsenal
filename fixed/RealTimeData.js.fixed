import React, { useState, useEffect, useRef, useCallback } from 'react';
import './RealTimeData.css';

// New SensorItem component to properly use React Hooks
const SensorItem = ({ label, valueProp, sensorValue, maxValue = 100, isMindMirrorConnected }) => {
  // Apply quantum uncertainty effect - value fluctuates slightly
  // This simulates the Heisenberg uncertainty principle
  const [quantumState, setQuantumState] = useState({
    observed: false,
    value: sensorValue,
    // Create a unique random seed for each sensor
    seed: Math.random() * 1000
  });
  
  // Use a ref to track previous Mind Mirror state to prevent erratic updates
  const prevMindMirrorRef = useRef(isMindMirrorConnected);
  
  // Update quantum state with uncertainty when value changes
  useEffect(() => {
    // IMPORTANT: When Mind Mirror state changes, don't immediately change values
    // This prevents layout shifts and erratic behavior
    if (prevMindMirrorRef.current !== isMindMirrorConnected) {
      // Gradually adapt to the mind mirror state change rather than instantly changing
      prevMindMirrorRef.current = isMindMirrorConnected;
    }
    
    const quantumTimer = setInterval(() => {
      if (!quantumState.observed) {
        // When not being observed, value has uncertainty
        // FIXED: Use more stable fluctuation with Mind Mirror
        const fluctuationAmount = isMindMirrorConnected ? 1.0 : 2.0; // Less fluctuation with Mind Mirror
        setQuantumState(prev => ({
          ...prev,
          value: sensorValue + (Math.sin(Date.now() * 0.001 + prev.seed) * fluctuationAmount)
        }));
      }
    }, 100);
    
    return () => clearInterval(quantumTimer);
  }, [sensorValue, quantumState.observed, quantumState.seed, isMindMirrorConnected]);
  
  // Observe/collapse function - called when user hovers
  const observeValue = () => {
    // When observed, value "collapses" to the actual measurement
    setQuantumState(prev => ({
      ...prev, 
      observed: true,
      value: sensorValue
    }));
  };
  
  // Stop observing function
  const stopObserving = () => {
    // When observation stops, value becomes uncertain again
    setQuantumState(prev => ({
      ...prev, 
      observed: false
    }));
  };
  
  // Calculate percentage for the progress bar
  const percent = Math.min(100, Math.max(0, (quantumState.value / maxValue) * 100));
  
  // UPDATED: Only show color shift in the sensor value, not the entire item
  // This prevents the label and surrounding elements from shifting colors
  const valueStyle = {
    transform: `translateX(${percent}%)`,
    // Only change color based on Mind Mirror state - no animation or transition
    backgroundColor: isMindMirrorConnected ? 'rgba(220, 130, 255, 0.75)' : 'rgba(120, 200, 255, 0.75)'
  };
  
  // UPDATED: No label or class changes when Mind Mirror is connected
  // This keeps the regular view with just color shifts in the progress area
  return (
    <div className="sensor-item" onMouseEnter={observeValue} onMouseLeave={stopObserving}>
      <div className="sensor-label">{label}</div>
      <div className="sensor-bar">
        <div className="sensor-value" style={valueStyle}></div>
      </div>
      <div className="sensor-reading">{Math.round(quantumState.value)}</div>
    </div>
  );
};

const RealTimeData = ({ glitches, realityStatus, mindMirrorConnected }) => {
  // Sensor data for visualization
  const sensorDataRef = useRef({
    neuralActivity: 78.4,
    perceptionShift: 12.3,
    realityCoherence: 89.7,
    temporalSync: 99.2,
    cognitiveDissonance: 15.0,
    quantumEntanglement: 45.2,
    realityVector: 65.7 // New combined vector
  });
  
  // Timeline data for visualization
  const timelineDataRef = useRef({
    // Store the last 100 data points (for 10-second history at 100ms updates)
    // Initialize with data points properly distributed across time
    history: (() => {
      const now = Date.now();
      // Create evenly distributed timestamps across the full 10-second window
      return Array.from({length: 100}, (_, i) => {
        // Distribute timestamps with most recent at index 99
        const timeOffset = (99 - i) * 100; // Exactly 100ms intervals
        // Create smooth sine waves for initial data
        const sineValue = 0.5 + Math.sin((i / 100) * Math.PI * 4) * 0.2;
        const cosValue = 0.5 + Math.cos((i / 100) * Math.PI * 3) * 0.15;
        return {
          timestamp: now - timeOffset,
          value: sineValue,
          vectorValue: cosValue,
          quantumEffects: [],
          observed: false
        };
      }).sort((a, b) => a.timestamp - b.timestamp); // Sort by timestamp to ensure proper order
    })(),
    // Quantum observation window - when user hovers over a time segment
    observationWindow: {
      start: -1,
      end: -1,
      center: -1, // Track cursor center for gradual effect
      active: false,
      // Add transition zones for smoother effect
      fadeInStart: -1,
      fadeOutEnd: -1
    },
    // Add update interval tracking to ensure consistent history
    lastUpdateTime: Date.now(),
    updateInterval: 100 // Target 100ms between history points
  });
  
  // Vector data for combined probability visualization
  const vectorDataRef = useRef({
    points: Array(100).fill(0.5),
    lastUpdateTime: Date.now(),
    influence: 0.5, // How strongly the vector influences the main graph
    glitchInfluenceMap: {} // Maps glitch IDs to their influence on the vector
  });
  
  // Creating a simple state to track if we're in emergency mode
  const [isEmergencyMode, setIsEmergencyMode] = useState(false);
  
  // Refs for canvas
  const canvasRef = useRef(null);
  const canvasContainerRef = useRef(null);
  
  // Debug flag - set to false for production
  const isDebugMode = process.env.NODE_ENV === 'development';
  
  // Function to create emergency data
  const createReliableData = useCallback(() => {
    // Generate high-frequency, naturally flowing data points
    const time = Date.now() * 0.001;
    const reliablePoints = [];
    
    // Generate 100 continuous flowing points
    for (let i = 0; i < 100; i++) {
      const x = i / 100;
      // Use multiple overlapping wave patterns for natural flow
      let y = 0.5;
      
      // Add multiple harmonic waves with different phases
      y += Math.sin(x * 10 + time) * 0.1;
      y += Math.sin(x * 7 + time * 0.7) * 0.15;
      y += Math.sin(x * 13 + time * 1.3) * 0.05;
      
      // Ensure point is within valid range
      y = Math.max(0.1, Math.min(0.9, y));
      reliablePoints.push(y);
    }
    
    return reliablePoints;
  }, []);
  
  // Function to calculate reality vector based on sensors and glitches
  const calculateRealityVector = useCallback(() => {
    try {
      // Get all relevant sensor values
      const {
        neuralActivity,
        perceptionShift,
        realityCoherence,
        temporalSync,
        cognitiveDissonance,
        quantumEntanglement
      } = sensorDataRef.current;
      
      // Calculate weighted vector from sensor data
      // Higher weights are given to more significant indicators
      let vectorValue = 0;
      
      // Neural activity (moderate positive contribution)
      vectorValue += (neuralActivity / 100) * 0.15;
      
      // Perception shift (high negative contribution - more shift means less stable reality)
      vectorValue -= (perceptionShift / 100) * 0.25;
      
      // Reality coherence (very high positive contribution)
      vectorValue += (realityCoherence / 100) * 0.30;
      
      // Temporal sync (high positive contribution)
      vectorValue += (temporalSync / 100) * 0.20;
      
      // Cognitive dissonance (moderate negative contribution)
      vectorValue -= (cognitiveDissonance / 100) * 0.15;
      
      // Quantum entanglement (low positive contribution)
      vectorValue += (quantumEntanglement / 100) * 0.10;
      
      // Normalize to 0-1 range (from our potentially -0.4 to +0.6 calculation)
      vectorValue = (vectorValue + 0.4) / 1.0;
      vectorValue = Math.max(0.1, Math.min(0.9, vectorValue));
      
      // Factor in active glitches
      if (glitches && glitches.length > 0) {
        // Create influence map if it doesn't exist
        if (Object.keys(vectorDataRef.current.glitchInfluenceMap).length === 0) {
          // Initialize influence map for consistent effects
          glitches.forEach(glitch => {
            const glitchId = glitch.id || Math.random().toString(36).substring(7);
            
            // Use hash function to create a consistent influence pattern
            const hash = (str) => str.split('').reduce((a, b) => ((a << 5) - a) + b.charCodeAt(0), 0);
            const hashValue = hash(glitchId);
            
            // Generate a random but consistent influence pattern
            const pattern = [];
            for (let i = 0; i < 100; i++) {
              // Use sine wave with unique frequency based on hash
              const freq = 0.05 + (Math.abs(hashValue) % 20) / 100;
              const phase = (Math.abs(hashValue) % 628) / 100;
              pattern.push(Math.sin(i * freq + phase) * 0.2);
            }
            
            vectorDataRef.current.glitchInfluenceMap[glitchId] = {
              strength: (Math.abs(hashValue) % 50) / 100 + 0.3, // 0.3 to 0.8
              pattern
            };
          });
        }
        
        // Apply each glitch's influence
        glitches.forEach(glitch => {
          const glitchId = glitch.id || '';
          const influence = vectorDataRef.current.glitchInfluenceMap[glitchId];
          
          if (influence) {
            const now = Date.now() * 0.001;
            const timeIndex = Math.floor(now * 10) % 100;
            const influenceValue = influence.pattern[timeIndex] * influence.strength;
            
            // Apply the influence to our vector
            vectorValue += influenceValue;
            vectorValue = Math.max(0.1, Math.min(0.9, vectorValue));
          }
        });
      }
      
      return vectorValue;
    } catch (error) {
      console.error("Error calculating reality vector:", error);
      return 0.5; // Fallback to neutral value
    }
  }, [glitches]);
  
  // Emergency draw function used as a fallback when the main drawing fails
  const emergencyDraw = useCallback(() => {
    try {
      // Set emergency mode
      setIsEmergencyMode(true);
      
      // Attempt to restore canvas with simpler, more reliable drawing
      const canvas = canvasRef.current;
      if (!canvas) return;
      
      const ctx = canvas.getContext('2d');
      if (!ctx) return;
      
      // Clear canvas for emergency draw
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // Get reliable data for emergency mode
      const reliableData = createReliableData();
      
      // Simple drawing - just a blue line with minimal features
      ctx.strokeStyle = 'rgba(120, 200, 255, 0.9)';
      ctx.lineWidth = 2;
      ctx.beginPath();
      
      for (let i = 0; i < reliableData.length; i++) {
        const x = (i / (reliableData.length - 1)) * canvas.width;
        const y = (1 - reliableData[i]) * canvas.height;
        
        if (i === 0) {
          ctx.moveTo(x, y);
        } else {
          ctx.lineTo(x, y);
        }
      }
      
      ctx.stroke();
      
      if (isDebugMode) {
        console.log("Emergency draw completed");
      }
    } catch (error) {
      console.error("Even emergency draw failed:", error);
    }
  }, [createReliableData, isDebugMode]);
  
  // DrawCanvas function
  const drawCanvas = useCallback(() => {
    try {
      const canvas = canvasRef.current;
      if (!canvas) return;
      
      const ctx = canvas.getContext('2d');
      if (!ctx) return;
      
      // Clear canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // Get history data
      const history = timelineDataRef.current.history;
      const observationWindow = timelineDataRef.current.observationWindow;
      
      // Draw baseline
      ctx.strokeStyle = 'rgba(100, 100, 100, 0.5)';
      ctx.beginPath();
      ctx.moveTo(0, canvas.height * 0.5);
      ctx.lineTo(canvas.width, canvas.height * 0.5);
      ctx.stroke();
      
      // Draw history if available
      if (history.length > 0) {
        // Draw data line
        ctx.strokeStyle = mindMirrorConnected ? 
          'rgba(240, 150, 255, 0.95)' : // Purple for mind mirror
          'rgba(120, 200, 255, 0.9)';   // Blue for standard
        ctx.lineWidth = 2;
        ctx.beginPath();
        
        const timespan = history[history.length - 1].timestamp - history[0].timestamp;
        
        history.forEach((point, index) => {
          const x = ((point.timestamp - history[0].timestamp) / timespan) * canvas.width;
          const y = (1 - point.value) * canvas.height;
          
          if (index === 0) {
            ctx.moveTo(x, y);
          } else {
            ctx.lineTo(x, y);
          }
          
          // Add dots for observed points
          if (point.observed) {
            ctx.fillStyle = mindMirrorConnected ? 
              'rgba(240, 160, 255, 0.9)' : // Purple for mind mirror
              'rgba(200, 225, 255, 0.9)';  // Blue for standard
            
            ctx.beginPath();
            ctx.arc(x, y, 3, 0, Math.PI * 2);
            ctx.fill();
          }
        });
        
        ctx.stroke();
      }
    } catch (error) {
      console.error("Error drawing canvas:", error);
      emergencyDraw();
    }
  }, [mindMirrorConnected, emergencyDraw]);
  
  // Mouse handlers for canvas interaction
  const handleCanvasMouseMove = useCallback((e) => {
    // Implementation for mouse movement handling on the canvas
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const relativeX = x / rect.width;
    
    // Update observation window in timeline data
    timelineDataRef.current.observationWindow.active = true;
    timelineDataRef.current.observationWindow.center = x;
    timelineDataRef.current.observationWindow.start = Math.max(0, x - 30);
    timelineDataRef.current.observationWindow.end = Math.min(canvas.width, x + 30);
    timelineDataRef.current.observationWindow.fadeInStart = Math.max(0, x - 60);
    timelineDataRef.current.observationWindow.fadeOutEnd = Math.min(canvas.width, x + 60);
    
    // Mark data points in observation window as observed
    const history = timelineDataRef.current.history;
    if (history.length > 0) {
      const startTime = history[0].timestamp;
      const endTime = history[history.length - 1].timestamp;
      const timespan = endTime - startTime;
      
      const observeStartTime = startTime + timespan * Math.max(0, relativeX - 0.1);
      const observeEndTime = startTime + timespan * Math.min(1, relativeX + 0.1);
      
      history.forEach(point => {
        point.observed = point.timestamp >= observeStartTime && point.timestamp <= observeEndTime;
      });
    }
  }, []);
  
  const handleCanvasMouseLeave = useCallback(() => {
    // Handle when mouse leaves the canvas
    timelineDataRef.current.observationWindow.active = false;
    
    // Clear observed states
    timelineDataRef.current.history.forEach(point => {
      point.observed = false;
    });
  }, []);
  
  // Function to update canvas size
  const updateCanvasSize = useCallback(() => {
    try {
      const canvas = canvasRef.current;
      const container = canvasContainerRef.current;
      if (!canvas || !container) return;
      
      // Get container dimensions
      const rect = container.getBoundingClientRect();
      
      // Update canvas size to match container
      canvas.width = rect.width;
      canvas.height = rect.height;
      
      // Redraw after resize
      drawCanvas();
    } catch (error) {
      console.error("Error updating canvas size:", error);
    }
  }, [drawCanvas]);
  
  // Function to create and initialize canvas
  const createCanvas = useCallback(() => {
    try {
      const container = canvasContainerRef.current;
      if (!container) return;
      
      // Create canvas if it doesn't exist
      if (!canvasRef.current) {
        const canvas = document.createElement('canvas');
        canvas.className = 'quantum-canvas';
        container.appendChild(canvas);
        canvasRef.current = canvas;
        
        // Add event listeners for mouse interaction
        canvas.addEventListener('mousemove', handleCanvasMouseMove);
        canvas.addEventListener('mouseleave', handleCanvasMouseLeave);
      }
      
      // Initialize canvas size
      updateCanvasSize();
    } catch (error) {
      console.error("Error creating canvas:", error);
    }
  }, [handleCanvasMouseMove, handleCanvasMouseLeave, updateCanvasSize]);
  
  // Function to update data
  const updateData = useCallback(() => {
    try {
      const now = Date.now();
      
      // Update sensor data with small random changes
      Object.keys(sensorDataRef.current).forEach(key => {
        // Random walk with constraints
        const currentValue = sensorDataRef.current[key];
        const change = (Math.random() - 0.5) * 2.0; // Random change between -1 and 1
        
        // Different constraints for different sensors
        let newValue;
        if (key === 'neuralActivity') {
          // Keep neural activity high (70-90)
          newValue = Math.max(70, Math.min(90, currentValue + change));
        } else if (key === 'realityCoherence') {
          // Reality coherence fluctuates more with glitches
          const glitchFactor = glitches && glitches.length > 0 ? glitches.length * 2 : 0;
          newValue = Math.max(70 - glitchFactor, Math.min(95 - glitchFactor, currentValue + change));
        } else if (key === 'perceptionShift') {
          // Perception shift increases with glitches
          const glitchFactor = glitches && glitches.length > 0 ? glitches.length * 3 : 0;
          newValue = Math.max(5 + glitchFactor, Math.min(20 + glitchFactor, currentValue + change));
        } else if (key === 'temporalSync') {
          // Temporal sync stays very high (95-100)
          newValue = Math.max(95, Math.min(100, currentValue + change * 0.5));
        } else if (key === 'cognitiveDissonance') {
          // Cognitive dissonance increases with glitches
          const glitchFactor = glitches && glitches.length > 0 ? glitches.length * 2.5 : 0;
          newValue = Math.max(10 + glitchFactor, Math.min(25 + glitchFactor, currentValue + change));
        } else if (key === 'quantumEntanglement') {
          // Quantum entanglement varies more (30-60)
          newValue = Math.max(30, Math.min(60, currentValue + change * 1.5));
        } else if (key === 'realityVector') {
          // Use the calculateRealityVector function
          newValue = calculateRealityVector() * 100;
        } else {
          // Default constraints (0-100)
          newValue = Math.max(0, Math.min(100, currentValue + change));
        }
        
        sensorDataRef.current[key] = newValue;
      });
      
      // Update timeline data
      const history = timelineDataRef.current.history;
      
      // Calculate new values
      const newValue = 0.5 + 
        Math.sin(now * 0.001) * 0.1 + 
        Math.sin(now * 0.0017) * 0.15 + 
        Math.sin(now * 0.0031) * 0.05;
      
      const newVectorValue = calculateRealityVector();
      
      // Add new point to history
      const newPoint = {
        timestamp: now,
        value: newValue,
        vectorValue: newVectorValue,
        quantumEffects: [],
        observed: false
      };
      
      // Remove oldest point
      history.shift();
      
      // Add new point
      history.push(newPoint);
      
      if (isDebugMode) {
        console.log("Data updated:", { 
          newValue, 
          newVectorValue,
          historyLength: history.length 
        });
      }
    } catch (error) {
      console.error("Error updating data:", error);
    }
  }, [glitches, isDebugMode, calculateRealityVector]);
  
  // Handle visibility changes (page focus/blur)
  const handleVisibilityChange = useCallback(() => {
    if (document.visibilityState === 'visible') {
      // Page is now visible - update data
      updateData();
      drawCanvas();
    }
  }, [updateData, drawCanvas]);
  
  // Set up update interval
  useEffect(() => {
    const updateInterval = setInterval(() => {
      updateData();
      drawCanvas();
    }, 100);
    
    return () => clearInterval(updateInterval);
  }, [updateData, drawCanvas]);
  
  // Initialize canvas and set up event listeners
  useEffect(() => {
    // Create canvas if it doesn't exist
    if (!canvasRef.current) {
      createCanvas();
    }
    
    // Set up event listeners
    window.addEventListener('resize', updateCanvasSize);
    document.addEventListener('visibilitychange', handleVisibilityChange);
    
    // Do initial update
    updateData();
    drawCanvas();
    
    return () => {
      window.removeEventListener('resize', updateCanvasSize);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [createCanvas, updateData, drawCanvas, updateCanvasSize, handleVisibilityChange]);
  
  // MODIFIED: For Mind Mirror connection, only adjust the quantum canvas - not the entire UI
  // This keeps the same layout and just changes the visualization colors
  return (
    <div className="real-time-data-container">
      <div className="sensor-container">
        <SensorItem 
          label="Neural Activity" 
          valueProp="neuralActivity" 
          sensorValue={sensorDataRef.current.neuralActivity} 
          maxValue={100} 
          isMindMirrorConnected={mindMirrorConnected} 
        />
        <SensorItem 
          label="Perception Shift" 
          valueProp="perceptionShift" 
          sensorValue={sensorDataRef.current.perceptionShift} 
          maxValue={100}
          isMindMirrorConnected={mindMirrorConnected} 
        />
        <SensorItem 
          label="Reality Coherence" 
          valueProp="realityCoherence" 
          sensorValue={sensorDataRef.current.realityCoherence} 
          maxValue={100}
          isMindMirrorConnected={mindMirrorConnected} 
        />
        <SensorItem 
          label="Temporal Sync" 
          valueProp="temporalSync" 
          sensorValue={sensorDataRef.current.temporalSync} 
          maxValue={100}
          isMindMirrorConnected={mindMirrorConnected} 
        />
        <SensorItem 
          label="Cognitive Dissonance" 
          valueProp="cognitiveDissonance" 
          sensorValue={sensorDataRef.current.cognitiveDissonance} 
          maxValue={100}
          isMindMirrorConnected={mindMirrorConnected} 
        />
        <SensorItem 
          label="Quantum Entanglement" 
          valueProp="quantumEntanglement" 
          sensorValue={sensorDataRef.current.quantumEntanglement} 
          maxValue={100}
          isMindMirrorConnected={mindMirrorConnected} 
        />
        <SensorItem 
          label="Reality Vector" 
          valueProp="realityVector" 
          sensorValue={sensorDataRef.current.realityVector} 
          maxValue={100}
          isMindMirrorConnected={mindMirrorConnected} 
        />
      </div>
      
      <div className="quantum-container" ref={canvasContainerRef}>
        {/* Canvas created programmatically */}
        {isEmergencyMode && <div className="emergency-mode-indicator">EMERGENCY MODE</div>}
      </div>
    </div>
  );
};

export default RealTimeData; 